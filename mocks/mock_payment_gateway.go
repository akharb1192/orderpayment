// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ankit\go\src\OrderPayment\ecommerce\order_service.go

// Package mock_ecommerce is a generated GoMock package.
package mock_ecommerce

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentGateway is a mock of PaymentGateway interface.
type MockPaymentGateway struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentGatewayMockRecorder
}

// MockPaymentGatewayMockRecorder is the mock recorder for MockPaymentGateway.
type MockPaymentGatewayMockRecorder struct {
	mock *MockPaymentGateway
}

// NewMockPaymentGateway creates a new mock instance.
func NewMockPaymentGateway(ctrl *gomock.Controller) *MockPaymentGateway {
	mock := &MockPaymentGateway{ctrl: ctrl}
	mock.recorder = &MockPaymentGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentGateway) EXPECT() *MockPaymentGatewayMockRecorder {
	return m.recorder
}

// ProcessPayment mocks base method.
func (m *MockPaymentGateway) ProcessPayment(orderID string, amount float64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", orderID, amount)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockPaymentGatewayMockRecorder) ProcessPayment(orderID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockPaymentGateway)(nil).ProcessPayment), orderID, amount)
}

// MockInventoryService is a mock of InventoryService interface.
type MockInventoryService struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceMockRecorder
}

// MockInventoryServiceMockRecorder is the mock recorder for MockInventoryService.
type MockInventoryServiceMockRecorder struct {
	mock *MockInventoryService
}

// NewMockInventoryService creates a new mock instance.
func NewMockInventoryService(ctrl *gomock.Controller) *MockInventoryService {
	mock := &MockInventoryService{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryService) EXPECT() *MockInventoryServiceMockRecorder {
	return m.recorder
}

// CheckStock mocks base method.
func (m *MockInventoryService) CheckStock(productID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStock", productID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStock indicates an expected call of CheckStock.
func (mr *MockInventoryServiceMockRecorder) CheckStock(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStock", reflect.TypeOf((*MockInventoryService)(nil).CheckStock), productID)
}
