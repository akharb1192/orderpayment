// order_service_test.go
package ecommerce_test

import (
	"testing"

	orderpayment "github.com/akharb1192/orderpayment/ecommerce" // replace with your actual package path
	mocks "github.com/akharb1192/orderpayment/mocks"            // mocks generated by mockgen
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
)

func TestPlaceOrder_Success(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	// Create mock instances of the dependencies
	mockPaymentGateway := mocks.NewMockPaymentGateway(ctrl)
	mockInventoryService := mocks.NewMockInventoryService(ctrl)

	// Create an instance of OrderService with mocked dependencies
	orderService := orderpayment.NewOrderService(mockPaymentGateway, mockInventoryService)

	// Set up mock expectations
	mockInventoryService.EXPECT().CheckStock("product123").Return(10, nil).Times(1)
	mockPaymentGateway.EXPECT().ProcessPayment("order456", 100.0).Return(true, nil).Times(1)

	// Call PlaceOrder
	result, err := orderService.PlaceOrder("order456", "product123", 2, 100.0)

	// Assertions
	assert.NoError(t, err)
	assert.Equal(t, "Order placed successfully", result)
}

func TestPlaceOrder_InsufficientStock(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	// Create mock instances of the dependencies
	mockPaymentGateway := mocks.NewMockPaymentGateway(ctrl)
	mockInventoryService := mocks.NewMockInventoryService(ctrl)

	// Create an instance of OrderService with mocked dependencies
	orderService := orderpayment.NewOrderService(mockPaymentGateway, mockInventoryService)

	// Set up mock expectations
	mockInventoryService.EXPECT().CheckStock("product123").Return(1, nil).Times(1)
	mockPaymentGateway.EXPECT().ProcessPayment("order456", 100.0).Times(0) // Payment should not be processed

	// Call PlaceOrder
	result, err := orderService.PlaceOrder("order456", "product123", 2, 100.0)

	// Assertions
	assert.Error(t, err)
	assert.Equal(t, "insufficient stock", err.Error())
	assert.Equal(t, "", result)
}

func TestPlaceOrder_PaymentFailure(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	// Create mock instances of the dependencies
	mockPaymentGateway := mocks.NewMockPaymentGateway(ctrl)
	mockInventoryService := mocks.NewMockInventoryService(ctrl)

	// Create an instance of OrderService with mocked dependencies
	orderService := orderpayment.NewOrderService(mockPaymentGateway, mockInventoryService)

	// Set up mock expectations
	mockInventoryService.EXPECT().CheckStock("product123").Return(10, nil).Times(1)
	mockPaymentGateway.EXPECT().ProcessPayment("order456", 100.0).Return(false, nil).Times(1)

	// Call PlaceOrder
	result, err := orderService.PlaceOrder("order456", "product123", 2, 100.0)

	// Assertions
	assert.Error(t, err)
	assert.Equal(t, "payment failed", err.Error())
	assert.Equal(t, "", result)
}
